{"version":3,"sources":["components/Navbar.tsx","contexts/TimerContext.tsx","components/TimerControls.tsx","components/TimerGraphic.tsx","components/TimerRecords.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","props","title","className","href","icon","faExternalLinkAlt","TimerController","timer","onSkip","onInitialTimeUpdated","onRecordsUpdated","timerInitialTime","timerRecords","lastDuration","lastStartTime","Date","timerTomatoStatus","this","Timer","interval","initialTime","onTick","on","onDone","off","ms","now","start","pause","resume","stop","onStatusChanged","status","time","console","log","record","duration","tomatoStatus","timeStarted","push","records","TimerContext","React","createContext","TimerControls","useContext","useState","timerStatus","setTimerStatus","nextDuration","setNextDuration","setTomatoStatus","useEffect","setInitialTime","setOnStatusChanged","timerOnDone","createRecord","setOnDone","removeOnDone","onClick","TimerGraphic","timeLeft","setTimeLeft","setOnTick","setOnSkip","setOnInitialTimeUpdated","minutes","Math","floor","seconds","stateToShow","TimerRecords","setTimerRecords","setOnRecordsUpdated","map","durationSeconds","key","getTime","moment","format","App","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55172410.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faExternalLinkAlt} from '@fortawesome/free-solid-svg-icons';\n\ninterface OwnProps {\n  title: string;\n}\n\ntype Props = OwnProps;\n\nconst Navbar: React.FunctionComponent<Props> = (props: Props) => {\n  const {title} = props;\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item content\">\n          <span className={'is-size-5-desktop has-text-weight-bold'}>\n            {title}\n          </span>\n        </div>\n      </div>\n      <div className=\"navbar-menu\">\n        <div className={'navbar-end'}>\n          <a href={'https://less.coffee'} className={'navbar-item'}>\n            less.coffee\n            <span className={'icon is-medium fas'}>\n              <FontAwesomeIcon icon={faExternalLinkAlt}/>\n            </span>\n          </a>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport Timer from 'tiny-timer';\n\ntype timerRecord = {\n  duration: number,\n  tomatoStatus: 'work' | 'rest',\n  timeStarted: Date,\n}\n\n/** TimerController centralises the timer logic **/\nclass TimerController {\n  private timer: any;\n  public onSkip: {(nextDuration: number): void};\n  private onInitialTimeUpdated: {(initialTime: number): void};\n  private onRecordsUpdated: {(records: timerRecord[]): void};\n  private timerInitialTime: number = 0;\n  private timerRecords: timerRecord[] = [];\n  private lastDuration: number = 0;\n  private lastStartTime: Date = new Date();\n  private timerTomatoStatus: 'work' | 'rest' = 'work';\n\n  constructor() {\n    this.timer = new Timer({interval: 50});\n    this.onSkip = () => {};\n    this.onInitialTimeUpdated = (initialTime) => {};\n    this.onRecordsUpdated = () => {};\n  }\n\n  setOnTick(onTick: {(ms: number): void}) {\n    this.timer.on('tick', onTick);\n  }\n\n  setOnDone(onDone: {(): void}) {\n    return this.timer.on('done', onDone);\n  }\n\n  removeOnDone(onDone: {(): void}) {\n    return this.timer.off('done', onDone);\n  }\n\n  start(ms: number) {\n    this.lastDuration = ms;\n    this.lastStartTime = new Date(Date.now());\n    this.timer.start(ms);\n  }\n\n  pause() {\n    this.timer.pause();\n  }\n\n  resume() {\n    this.timer.resume();\n  }\n\n  stop() {\n    this.timer.stop();\n  }\n\n  setOnStatusChanged(onStatusChanged: {(status: string): void}) {\n    this.timer.on('statusChanged', onStatusChanged);\n  }\n\n  status() {\n    return this.timer.status;\n  }\n\n  time() {\n    return this.timer.time;\n  }\n\n  setInitialTime(ms: number) {\n    this.timerInitialTime = ms;\n    console.log(this.timerInitialTime);\n    this.onInitialTimeUpdated(ms);\n  }\n\n  setOnInitialTimeUpdated(onInitialTimeUpdated: {(initialTime: number): void}) {\n    this.onInitialTimeUpdated = onInitialTimeUpdated;\n  }\n\n  initialTime() {\n    return this.timerInitialTime;\n  }\n\n  setOnSkip(onSkip: {(nextDuration: number): void}) {\n    this.onSkip = onSkip;\n  }\n\n  createRecord(status: 'work' | 'rest') {\n    const record: timerRecord = {\n      duration: this.lastDuration - this.timer.time,\n      tomatoStatus: status,\n      timeStarted: this.lastStartTime,\n    };\n\n    this.timerRecords.push(record);\n\n    this.onRecordsUpdated(this.records());\n\n    console.log(this.records());\n  }\n\n  records() {\n    return this.timerRecords;\n  }\n\n  setOnRecordsUpdated(onRecordsUpdated: {(records: timerRecord[]): void}) {\n    this.onRecordsUpdated = onRecordsUpdated;\n  }\n\n  setTomatoStatus(status: 'work' | 'rest') {\n    this.timerTomatoStatus = status;\n  }\n\n  tomatoStatus() {\n    return this.timerTomatoStatus;\n  }\n}\n\nconst TimerContext = React.createContext(new TimerController());\nexport {TimerController};\nexport default TimerContext;\n","import React, {useContext, useEffect, useState} from 'react';\nimport TimerContext from '../contexts/TimerContext';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst minutes25 = 25 * 60 * 1000;\nconst minutes5 = 5 * 60 * 1000;\n\nconst TimerControls: React.FunctionComponent<Props> = (props: Props) => {\n  const TimerController = useContext(TimerContext);\n  const [timerStatus, setTimerStatus] = useState(TimerController.status());\n  const [nextDuration, setNextDuration] = useState(minutes25);\n  const [tomatoStatus, setTomatoStatus] = useState(TimerController.tomatoStatus());\n  useEffect(() => {\n    console.log(timerStatus);\n    TimerController.setInitialTime(nextDuration);\n    TimerController.setOnStatusChanged((status) => {\n      console.log(status);\n      setTimerStatus(status);\n    });\n  }, []);\n\n  useEffect(() => {\n    const timerOnDone = () => {\n      if (tomatoStatus === 'work') {\n        setNextDuration(minutes5);\n        TimerController.setInitialTime(minutes5);\n        setTomatoStatus('rest');\n        TimerController.createRecord('work');\n        TimerController.start(minutes5);\n      } else if (tomatoStatus === 'rest') {\n        setNextDuration(minutes25);\n        TimerController.setInitialTime(minutes25);\n        setTomatoStatus('work');\n        TimerController.createRecord('rest');\n        TimerController.start(minutes25);\n      }\n    };\n    TimerController.setOnDone(timerOnDone);\n    return () => {\n      TimerController.removeOnDone(timerOnDone);\n    };\n  }, [tomatoStatus]);\n  useEffect(() => {\n    console.log(tomatoStatus);\n  }, [tomatoStatus]);\n\n  return (\n    <div className={'level'}>\n      <div className={'level-left'}>\n        <span\n          className={`button level-item is-primary ${timerStatus !== 'stopped' && 'is-static'}`}\n          onClick={() => TimerController.start(nextDuration)}>\n          Start\n        </span>\n        <span\n          className={'button level-item'}\n          onClick={() => {\n            timerStatus === 'paused' ? TimerController.resume() : TimerController.pause();\n          }}>\n          {timerStatus === 'paused' ? 'Resume' : 'Pause'}\n        </span>\n        <span\n          className={'button level-item'}\n          onClick={() => {\n            TimerController.createRecord(tomatoStatus);\n            TimerController.stop();\n            TimerController.onSkip(minutes25);\n            setNextDuration(minutes25);\n          }}>\n          Skip\n        </span>\n      </div>\n    </div>);\n};\n\nexport default TimerControls;\n","import React, {useContext, useEffect, useState} from 'react';\nimport TimerContext from '../contexts/TimerContext';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst TimerGraphic: React.FunctionComponent<Props> = (props: Props) => {\n  const TimerController = useContext(TimerContext);\n  const [timeLeft, setTimeLeft] = useState(TimerController.initialTime() / 1000);\n  const [tomatoStatus, setTomatoStatus] = useState(TimerController.tomatoStatus());\n  const [timerStatus, setTimerStatus] = useState(TimerController.status());\n  useEffect(() => {\n    console.log('registering listeners for timergraphic');\n    setTimeLeft(TimerController.initialTime() / 1000);\n    TimerController.setOnTick((ms) => {\n      setTimeLeft(ms/1000);\n    });\n    TimerController.setOnSkip((nextDuration) => {\n      setTimeLeft(nextDuration/1000);\n    });\n    TimerController.setOnInitialTimeUpdated((initialTime) => {\n      console.log(initialTime);\n      setTimeLeft(initialTime/1000);\n    });\n    TimerController.setOnStatusChanged((status) => {\n      console.log(status);\n      setTimerStatus(status);\n    });\n  }, []);\n\n  const minutes = Math.floor(timeLeft/60);\n  const seconds = Math.floor(timeLeft % 60);\n\n  const stateToShow = `${tomatoStatus} time remaining (${timerStatus}):`;\n\n  return (<>\n    <p className={'is-capitalized'}>{stateToShow}</p>\n    <span className={'is-size-1'}>{minutes}m {seconds}s</span>\n  </>);\n};\n\nexport default TimerGraphic;\n","import React, {useContext, useEffect, useState} from 'react';\nimport TimerContext from '../contexts/TimerContext';\nimport moment from 'moment';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst TimerRecords: React.FunctionComponent<Props> = (props: Props) => {\n  const TimerController = useContext(TimerContext);\n  const [timerRecords, setTimerRecords] = useState([...TimerController.records()]);\n  useEffect(() => {\n    TimerController.setOnRecordsUpdated((records) => {\n      console.log('records updated');\n      setTimerRecords([...records]);\n    });\n  }, []);\n\n  useEffect(() => {}, [timerRecords]);\n\n  return (\n    <table className={'table'}>\n      <thead>\n        <tr>\n          <td>Duration</td>\n          <td>Work/Rest</td>\n          <td>Start Time</td>\n        </tr>\n      </thead>\n      <tbody>\n        {timerRecords.map((record) => {\n          console.log(record);\n\n          const durationSeconds = record.duration / 1000;\n          const minutes = Math.floor(durationSeconds/60);\n          const seconds = Math.floor(durationSeconds % 60);\n\n          return <tr key={record.timeStarted.getTime()}>\n            <td>{minutes}m {seconds}s</td>\n            <td className={'is-capitalized'}>{record.tomatoStatus}</td>\n            <td>{moment(record.timeStarted).format('h:mm:ss a')}</td>\n          </tr>;\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TimerRecords;\n","import React from 'react';\nimport './App.css';\nimport 'bulma';\nimport Navbar from './components/Navbar';\nimport TimerControls from './components/TimerControls';\nimport TimerGraphic from './components/TimerGraphic';\nimport TimerContext, {TimerController} from './contexts/TimerContext';\nimport TimerRecords from './components/TimerRecords';\n\n// eslint-disable-next-line require-jsdoc\nfunction App() {\n  return (<div className={'container'}>\n    <TimerContext.Provider value={new TimerController()}>\n      <Navbar title={'Pugodoro'} />\n      <div className={'columns'}>\n        <div className={'column'}>\n          <section className={'section'}>\n            <div className={'container'}>\n              <TimerGraphic />\n              <TimerControls />\n            </div>\n          </section>\n        </div>\n        <div className={'column'}>\n          <section className={'section'}>\n            <div className={'container'}>\n              <TimerRecords />\n            </div>\n          </section>\n        </div>\n      </div>\n    </TimerContext.Provider>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}